// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  favoriteIds   String[]    @db.ObjectId


  accounts      Account[]
  listings      Listing[]
  reservations  Reservation[]
}


model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider ,providerAccountId])
}

model Listing {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  imageSrc       String
  createdAt      DateTime    @default(now())
  category       String
  roomCount      Int
  bathroomCount  Int
  guestCount     Int
  locationValue  String
  userId         String      @db.ObjectId
  price          Int
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations   Reservation[]
}


//model Reservation{
  //id         String   @id @default(auto()) @map("_id") @db.ObjectId
  //userId     String   @db.ObjectId
  //listingId  String   @db.ObjectId
  //startDate  DateTime
  //endDate    DateTime
  //totalPrice Int
  //createdAt  DateTime @default(now())
  //user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  //listing    Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
//}


// Add this to your schema.prisma file
// Make sure to update your existing Reservation model

model Reservation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  
  startDate  DateTime
  endDate    DateTime
  totalPrice Float
  
  // Add these new fields for hourly bookings
  bookingType String  @default("daily")  // Can be 'daily' or 'hourly'
  startTime   String? // Only used for hourly bookings
  endTime     String? // Only used for hourly bookings
  
  userId    String @db.ObjectId
  listingId String @db.ObjectId

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}



